package com.example.user_service.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.user_service.entity.User;
import com.example.user_service.security.JwtUtil;
import com.example.user_service.service.UserService;
@CrossOrigin("*")
@RestController
@RequestMapping("/api/auth")
public class UserController {
	
	@Autowired
    private UserService userService;
	
	@Autowired
    private JwtUtil jwtUtil;
	
	 @PostMapping("/register")
	    public ResponseEntity<?> registerUser(@RequestBody User user) {
	        User createdUser = userService.registerUser(user);
	        return ResponseEntity.ok(createdUser);
	    }
	 

	 @PostMapping("/login")
	 public ResponseEntity<String> login(@RequestBody LoginRequest loginRequest) {
	     User user = userRepository.findByUsername(loginRequest.getUsername()).orElse(null);
	     
	     if (user != null && passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
	         String token = jwtUtil.generateToken(user); // âœ… pass user object
	         return ResponseEntity.ok(token);
	     }
	     
	     return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
	 }
	 
	 @GetMapping("/users")
	    public List<User> getAllUsers() {
	        return userService.getAllUsers();
	    }
	 
	    
	    @GetMapping("/users/{id}")
	    public ResponseEntity<User> getUser(@PathVariable Long id) {
	        return userService.getUserById(id)
	                .map(ResponseEntity::ok)
	                .orElse(ResponseEntity.notFound().build());
	    }

	    @PutMapping("/users/{id}")
	    public ResponseEntity<User> editUser(@PathVariable Long id, @RequestBody User user) {
	        return ResponseEntity.ok(userService.editUser(id, user));
	    }

	    @DeleteMapping("/users/{id}")
	    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
	        userService.deleteUser(id);
	        return ResponseEntity.ok().build();
	    }
	
}
