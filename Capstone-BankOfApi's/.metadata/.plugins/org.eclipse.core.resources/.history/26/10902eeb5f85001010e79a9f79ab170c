package com.example.transaction_service.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.transaction_service.entity.Transaction;
import com.example.transaction_service.service.TransactionService;

@RestController
@RequestMapping("/api/transfers")
@CrossOrigin("*")
public class TransactionController {
	
	
	@Autowired
	
    private TransactionService transactionService;

 
    @PostMapping
    
    public Transaction createTransaction(@RequestBody Transaction transaction) {
       
        Long userId = (Long) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        transaction.setUserId(userId);
        return transactionService.createTransaction(transaction);
    }

    
    @GetMapping("/{id}")
    public Transaction getTransaction(@PathVariable Long id) {
        return transactionService.getTransactionById(id);
    }

   
    @GetMapping("/all")
    public List<Transaction> getAllTransactions() {
        return transactionService.getAllTransactions();
    }
    
    @GetMapping
    public ResponseEntity<List<Transaction>> getTransactionsByUserId() {
        List<Transaction> transactions = transactionService.getTransactionsByUserId();
        return ResponseEntity.ok(transactions);
    }

   
    @PutMapping("/{id}")
    public Transaction updateTransaction(@PathVariable Long id, @RequestBody Transaction transaction) {
        return transactionService.updateTransaction(id, transaction);
    }
    
 
    @DeleteMapping("/{id}")
    public String deleteTransaction(@PathVariable Long id) {
        transactionService.deleteTransaction(id);
        return "Transaction deleted successfully";
    }

}
