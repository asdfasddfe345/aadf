package com.example.user_service.service;

import java.util.List;

import java.util.Optional;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.user_service.entity.User;
import com.example.user_service.exception.ResourceNotFoundException;
import com.example.user_service.repository.UserRepository;

@Service
public class UserService {
	
	@Autowired
	 private UserRepository userRepository;
	
	private BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

	public User registerUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }
	
	 public boolean login(String username, String password) {
	        Optional<User> optionalUser = userRepository.findByUsername(username);
	        if (optionalUser.isPresent()) {
	            User user = optionalUser.get();
	            return passwordEncoder.matches(password, user.getPassword());
	        }
	        return false;
	    }
	 
	 public Optional<User> getUserById(Long id) {
	        return userRepository.findById(id);
	    }
	 
	 
	 public User editUser(Long id, User updatedUser) {
	        User user = userRepository.findById(id)
	                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
	        user.setName(updatedUser.getName());
	        user.setUsername(updatedUser.getUsername());
	        user.setEmail(updatedUser.getEmail());
	        user.setPhone(updatedUser.getPhone());
	        user.setAddress(updatedUser.getAddress());
	        // Update password if provided
	        if(updatedUser.getPassword() != null && !updatedUser.getPassword().isEmpty()) {
	            user.setPassword(passwordEncoder.encode(updatedUser.getPassword()));
	        }
	        return userRepository.save(user);
	    }

	    // Delete user
	    public void deleteUser(Long id) {
	        User user = userRepository.findById(id)
	                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
	        userRepository.delete(user);
	    }

	    // Get all users
	    public List<User> getAllUsers() {
	        return userRepository.findAll();
	    }
}
