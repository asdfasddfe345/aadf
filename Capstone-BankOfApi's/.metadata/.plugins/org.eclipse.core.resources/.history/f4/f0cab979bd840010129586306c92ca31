package com.example.user_service.service;

import java.util.List;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.user_service.entity.User;
import com.example.user_service.exception.ResourceNotFoundException;
import com.example.user_service.repository.UserRepository;

@Service
public class UserService {
	
	@Autowired
	 private UserRepository userRepository;
	
	private BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

	public User registerUser(User user) {
		 user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userRepository.save(user);
    }
	
	public Optional<User> getUserById(Integer id) {
        return userRepository.findById(id);
    }
	
	public void deleteUser(Integer id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
        userRepository.delete(user);
    }
	
	 public User editUser(Integer id, User updatedUser) {
	        User user = userRepository.findById(id)
	                .orElseThrow(() -> new ResourceNotFoundException("User not found"));
	        user.setUsername(updatedUser.getUsername());
	        if (updatedUser.getPassword() != null) {
	            user.setPassword(passwordEncoder.encode(updatedUser.getPassword()));
	        }
	        user.setAddress(updatedUser.getAddress());
	        return userRepository.save(user);
	    }
	 
	 public boolean login(String username, String password) {
	        Optional<User> userOpt = userRepository.findByUsername(username);
	        if (userOpt.isPresent()) {
	            return passwordEncoder.matches(password, userOpt.get().getPassword());
	        }
	        return false;
	    }
	 
	 public List<User> getAllUsers() {
	        return userRepository.findAll();
	 }
	
}
